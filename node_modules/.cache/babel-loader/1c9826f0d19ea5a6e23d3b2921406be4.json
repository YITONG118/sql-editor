{"remainingRequest":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/babel-loader/lib/index.js!/Users/lishumin/Desktop/demo/sql-editor/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/lishumin/Desktop/demo/sql-editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lishumin/Desktop/demo/sql-editor/src/sqlEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/lishumin/Desktop/demo/sql-editor/src/sqlEditor.vue","mtime":1592982765478},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["sqlEditor.vue"],"names":[],"mappings":";;;;;;AAOA,SAAA,UAAA,EAAA,UAAA,QAAA,gBAAA;AACA,OAAA,YAAA,MAAA,eAAA;AACA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AACA,OAAA,+BAAA,C,CACA;;AACA,OAAA,yBAAA,C,CACA;;AACA,OAAA,mCAAA,C,CAEA;;AACA,OAAA,2CAAA,C,CAEA;;AACA,OAAA,8CAAA;AACA,OAAA,yCAAA,C,CAEA;;AACA,OAAA,oCAAA;AACA,OAAA,qCAAA,C,CAEA;;AACA,OAAA,8CAAA;AACA,OAAA,+CAAA;AACA,OAAA,yCAAA;AACA,OAAA,8CAAA,C,CACA;;AACA,OAAA,gCAAA;AACA,OAAA,8BAAA,C,CAEA;;AACA,OAAA,sCAAA;AACA,OAAA,qCAAA;AACA,OAAA,uCAAA;AACA,OAAA,mCAAA;AACA,OAAA,qCAAA;AACA,OAAA,sCAAA;AACA,OAAA,wCAAA;AACA,OAAA,mCAAA,C,CAEA;;AACA,OAAA,8BAAA;AACA,OAAA,+BAAA;AAEA,SAAA,QAAA,EAAA,SAAA,QAAA,cAAA,C,CAGA;;AACA,MAAA,sBAAA,GAAA,8BAAA,C,CAEA;;AACA,MAAA,cAAA,GAAA,CACA,8CADA,EAEA,8CAFA,CAAA;AAKA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA;AADA,GAFA;AAKA,EAAA,KAAA,EAAA,EALA;;AAMA,EAAA,IAAA,GAAA;AACA,WAAA;AACA,MAAA,OAAA,EAAA,aACA,qBADA,GAEA,QAFA,GAGA,4BAHA,GAIA,SAJA,GAKA,2CALA,GAMA,sDAPA;AAQA,MAAA,aAAA,EAAA;AACA;AACA,QAAA,OAAA,EAAA,CAFA;AAGA,QAAA,IAAA,EAAA,cAHA;AAIA,QAAA,KAAA,EAAA,UAJA;AAKA,QAAA,UAAA,EAAA,KALA;AAMA,QAAA,WAAA,EAAA,IANA;AAOA,QAAA,IAAA,EAAA,IAPA;AAQA;AACA,QAAA,UAAA,EAAA,IATA;AAUA,QAAA,OAAA,EAAA,CAAA,wBAAA,EAAA,uBAAA,CAVA;AAWA;AACA;AACA,QAAA,MAAA,EAAA,SAbA;AAcA;AACA,QAAA,SAAA,EAAA;AACA,UAAA,EAAA,EAAA,MAAA;AACA,iBAAA,YAAA;AACA,WAHA;AAIA,wBAAA;AAJA,SAfA;AAqBA,QAAA,UAAA,EAAA,IArBA;AAqBA;AACA,QAAA,WAAA,EAAA,EAtBA;AAsBA;AACA,QAAA,WAAA,EAAA,IAvBA;AAwBA,QAAA,cAAA,EAAA,EAxBA;AAyBA;AACA;AACA;AACA;AACA;AACA,QAAA,WAAA,EAAA;AACA;AACA,UAAA,cAAA,EAAA;AAFA,SA9BA;AAkCA;AACA,QAAA,wBAAA,EAAA,EAnCA;AAoCA;AACA,QAAA,oBAAA,EAAA,EArCA;AAsCA;AACA,QAAA,iBAAA,EAAA,EAvCA;AAwCA,QAAA,MAAA,EAAA,IAxCA,CAyCA;AACA;AACA;AACA;AACA;;AA7CA;AARA,KAAA;AAwDA,GA/DA;;AAgEA,EAAA,QAAA,EAAA;AACA,IAAA,UAAA,GAAA;AACA,aAAA,KAAA,KAAA,CAAA,UAAA,CAAA,UAAA;AACA;;AAHA,GAhEA;;AAqEA,EAAA,OAAA,GAAA;AACA,QAAA,KAAA,KAAA,CAAA,UAAA,EAAA;AACA;AACA,WAAA,KAAA,CAAA,UAAA,CAAA,UAAA,CAAA,EAAA,CAAA,OAAA,EAAA,KAAA,iBAAA;AACA;AACA,GA1EA;;AA2EA,EAAA,SAAA,GAAA,CAAA,CA3EA;;AA4EA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,kBAAA,CAAA,MAAA,EAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AAEA,MAAA,IAAA,GAAA,KAAA,wBAAA,CAAA,KAAA,wBAAA,EAAA,IAAA,CAAA;AACA,WAAA,QAAA,CAAA,IAAA,EAAA,IAAA;AACA,aAAA;AACA,QAAA,IAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,KAAA,CAFA;AAGA,QAAA,EAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,GAAA;AAHA,OAAA;AAKA,KAfA;;AAgBA;AACA,IAAA,wBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA;;AACA,YAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AACA;AACA;AACA;AACA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA;AACA;AACA;AACA;;AACA,aAAA,OAAA;AACA,KAjCA;;AAkCA,IAAA,mBAAA,CAAA,MAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,MAAA,CAAA,WAAA,EAAA,CAJA,CAKA;;AACA,UAAA,iBAAA,GAAA,KAAA,wBAAA,CACA,KAAA,iBADA,EAEA,IAFA,CAAA;AAIA,MAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,iBAAA,CAAA;AACA,WAAA,QAAA,CAAA,IAAA,EAAA,IAAA;AACA,MAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AAEA,aAAA;AACA,QAAA,IAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,KAAA,CAFA;AAGA,QAAA,EAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,GAAA;AAHA,OAAA;AAKA,KArDA;;AAsDA;AACA,IAAA,YAAA,CAAA,MAAA,EAAA;AACA,UAAA,iBAAA,GAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,UAAA,KAAA,GAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,MAAA,CAAA,WAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA,CALA,CAMA;AAEA;;AACA,UAAA,IAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,EAAA;AACA,YAAA,CAAA,GAAA,KAAA,qBAAA,CAAA,iBAAA,EAAA,IAAA,CAAA;AACA,QAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACA,OAZA,CAaA;;;AACA,UAAA,IAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,EAAA;AACA,YAAA,KAAA,UAAA,IAAA,KAAA,UAAA,CAAA,MAAA,EAAA;AACA,cAAA,GAAA,GAAA,KAAA,qBAAA,CAAA,KAAA,UAAA,EAAA,IAAA,CAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA;AACA;AACA;;AACA,WAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EApBA,CAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AAEA,aAAA;AACA,QAAA,IAAA,EAAA,IADA;AAEA,QAAA,IAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,KAAA,CAFA;AAGA,QAAA,EAAA,EAAA,UAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,EAAA,KAAA,CAAA,GAAA;AAHA,OAAA;AAKA,KA9FA;;AA+FA;AACA,IAAA,qBAAA,CAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,OAAA,EAAA,EAAA;AACA,eAAA,EAAA;AACA;;AAEA,UAAA,GAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,MAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,GAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,CAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA;;AACA,YAAA,CAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AACA;AACA;AACA;AACA,cAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA;AACA;AACA;AACA;;AAEA,aAAA,OAAA;AACA,KArHA;;AAsHA,IAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,GAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA;;AACA,cAAA,CAAA,CAAA,OAAA,CAAA,GAAA,IAAA,CAAA,CAAA,OAAA,CAAA,GAAA,CAAA,EAAA;AACA,gBAAA,IAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA;AACA;AACA;AACA;AACA,KAlIA;;AAmIA,IAAA,YAAA,GAAA;AACA,WAAA,OAAA,GAAA,YAAA,CAAA,MAAA,CAAA,KAAA,OAAA,EAAA,EAAA,CAAA;AACA,KArIA;;AAsIA;AACA,IAAA,iBAAA,CAAA,MAAA,EAAA,CAAA,EAAA;AACA,WAAA,KAAA,IAAA,YAAA,CAAA,KAAA,KAAA,CAAA;AACA,WAAA,KAAA,GAAA,UAAA,CAAA,MAAA;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CADA,CACA;;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,QAAA,CAAA,MAAA,EAAA,GAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,MAAA,CAAA,WAAA,GAAA,IAAA,EAAA,CAJA,CAIA;;AAEA,YACA,CAAA,CAAA,GAAA,KAAA,OAAA,IACA,CAAA,CAAA,GAAA,KAAA,KADA,IAEA,CAAA,CAAA,GAAA,KAAA,QAFA,IAGA,IAAA,KAAA,EAJA,EAKA;AACA,eAAA,WAAA,GAAA,EAAA;AACA,iBAAA,IAAA;AACA;;AACA,YACA,KAAA,WAAA,KAAA,IAAA,KACA,CAAA,CAAA,GAAA,KAAA,SAAA,IAAA,CAAA,CAAA,GAAA,KAAA,WADA,CADA,EAGA;AACA,iBAAA,IAAA;AACA;;AACA,aAAA,WAAA,GAAA,IAAA,CArBA,CAsBA;;AACA,aAAA,iBAAA,GAAA,EAAA;AACA,aAAA,MAAA,GAAA,GAAA;AACA,aAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA;AACA,OA1BA,EA0BA,GA1BA,CAAA;AA2BA,KApKA;;AAqKA;AACA,IAAA,QAAA,CAAA,CAAA,EAAA,GAAA,EAAA;AACA,UAAA,CAAA,GAAA,CAAA,CAAA,UAAA,CAAA,GAAA,CAAA;;AAEA,UACA,CAAA,CAAA,MAAA,KACA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,KAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,OAAA,CAAA,GAAA,KAAA,CADA,CADA,EAGA;AACA,YAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA;AACA,cAAA,MAAA,GAAA,CAAA,CAAA,UAAA,CAAA;AACA,YAAA,IAAA,EAAA,GAAA,CAAA,IADA;AAEA,YAAA,EAAA,EAAA,CAAA,CAAA;AAFA,WAAA,CAAA;AAIA,UAAA,CAAA,CAAA,MAAA,GAAA,CAAA,MAAA,CAAA,MAAA,GAAA,CAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AACA,UAAA,CAAA,CAAA,KAAA,GAAA,MAAA,CAAA,KAAA;AACA;AACA;;AACA,aAAA,CAAA;AACA,KAvLA;;AAwLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA;AACA,UAAA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAA,CADA,CAEA;;AACA,UAAA,IAAA,CAAA,IAAA,OAAA,EAAA,EAAA;AACA;AACA;;AACA,UAAA,WAAA,GAAA,KAAA,iBAAA,CAAA,KAAA,CAAA;AACA,UAAA,SAAA,GAAA,MAAA,CAAA,QAAA,CAAA;AAAA,QAAA,IAAA,EAAA,CAAA;AAAA,QAAA,EAAA,EAAA;AAAA,OAAA,EAAA,GAAA,CAAA,CAPA,CAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAA,sBAAA,CAAA,IAAA,CAAA,SAAA,CAAA,EAAA;AACA;AACA,aAAA,aAAA;AACA,OAHA,MAGA,IAAA,WAAA,CAAA,MAAA,EAAA;AACA;AACA,aAAA,cAAA,CAAA,WAAA,EAAA,IAAA;AACA,OAHA,MAGA;AACA,aAAA,eAAA,CAAA,OAAA,EADA,CACA;AACA;AACA,KA5NA;;AA6NA,IAAA,aAAA,GAAA;AACA,WAAA,wBAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,KAAA,CAAA;AACA,WAAA,eAAA,CAAA,OAAA;AACA,KAhOA;;AAiOA,IAAA,cAAA,CAAA,WAAA,EAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA,UAAA,KAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,UAAA,QAAA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,OAAA,CAAA,GAAA,CAAA;;AACA,UAAA,GAAA,KAAA,CAAA,CAAA,EAAA;AACA,QAAA,QAAA,GAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,GAAA,CAAA;AAEA,QAAA,WAAA,CAAA,OAAA,CAAA,CAAA,IAAA,EAAA,CAAA,KAAA;AACA,cAAA,IAAA,CAAA,KAAA,KAAA,QAAA,EAAA;AACA,YAAA,KAAA,GAAA,IAAA,CAAA,IAAA;AACA;AACA,SAJA;;AAMA,YAAA,KAAA,EAAA;AACA,UAAA,IAAA,CAAA,MAAA,GAAA,CAAA,KAAA,CAAA;AACA,eAAA,aAAA;AACA;AACA,OAbA,MAaA;AACA,QAAA,WAAA,CAAA,OAAA,CAAA,CAAA,IAAA,EAAA,CAAA,KAAA;AACA,cAAA,IAAA,CAAA,IAAA,KAAA,EAAA,EAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA;AACA;AACA,SAJA;AAMA,QAAA,MAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,MAAA,CAAA,CAAA;AACA,QAAA,IAAA,CAAA,MAAA,GAAA,MAAA;;AAEA,YAAA,MAAA,CAAA,MAAA,EAAA;AACA,eAAA,aAAA,CAAA;AAAA,YAAA;AAAA,WAAA;AACA;AACA;AACA,KAlQA;;AAmQA,IAAA,aAAA,GAAA;AACA,WAAA,iBAAA,GAAA,CAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AACA,WAAA,eAAA,CAAA,QAAA;AACA,KAtQA;;AAuQA;AACA,IAAA,YAAA,CAAA,KAAA,EAAA;AACA,UAAA,QAAA,GAAA;AACA,QAAA,KAAA,EAAA,CADA;AAEA,QAAA,EAAA,EAAA,CAFA;AAGA,QAAA,KAAA,EAAA,CAHA;AAIA,QAAA,IAAA,EAAA,CAJA;AAKA,QAAA,KAAA,EAAA,CALA;AAMA,QAAA,KAAA,EAAA,CANA;AAOA,QAAA,KAAA,EAAA;AAPA,OAAA;AASA,aAAA,CAAA,QAAA,CAAA,KAAA,CAAA,WAAA,EAAA,CAAA;AACA,KAnRA;;AAoRA;AACA,IAAA,iBAAA,CAAA,GAAA,EAAA;AACA,UAAA,iBAAA,GAAA,QAAA,CAAA,MAAA,CAAA,SAAA,CAAA;AACA,UAAA,KAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,cAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,GAAA,GAAA,cAAA,CAAA,CAAA,CAAA;;AACA,iBAAA;AACA,cAAA,KAAA,GAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA;;AACA,cAAA,CAAA,KAAA,EAAA;AACA;AACA;;AAEA,UAAA,GAAA,CAAA,SAAA,GAAA,KAAA,CAAA,KAAA,GAAA,CAAA;AACA,cAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AAEA,cAAA,KAAA,GAAA,EAAA;;AACA,cAAA,KAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA;;AACA,gBAAA,CAAA,KAAA,YAAA,CAAA,KAAA,CAAA,EAAA;AACA,cAAA,KAAA,GAAA,EAAA;AACA;AACA;;AACA,cAAA,iBAAA,CAAA,OAAA,CAAA,CAAA,CAAA,WAAA,EAAA,MAAA,CAAA,CAAA,EAAA;AACA;AACA;;AAEA,UAAA,KAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,EAAA,CADA;AAEA,YAAA,KAAA,EAAA;AAFA,WAAA;AAIA;AACA;;AACA,aAAA,KAAA;AACA,KArTA;;AAsTA,IAAA,eAAA,CAAA,IAAA,EAAA;AACA,UAAA,MAAA;;AACA,UAAA,KAAA,MAAA,EAAA;AACA,YAAA,GAAA,GAAA,KAAA,UAAA,CAAA,SAAA,EAAA;;AACA,YAAA,CAAA,CAAA,CAAA,OAAA,CAAA,KAAA,MAAA,EAAA,GAAA,CAAA,EAAA;AACA;AACA;AACA;;AAEA,UAAA,IAAA,IAAA,OAAA,EAAA;AACA,QAAA,MAAA,GAAA,KAAA,YAAA;AACA,OAFA,MAEA,IAAA,IAAA,IAAA,OAAA,EAAA;AACA,QAAA,MAAA,GAAA,KAAA,kBAAA;AACA,OAFA,MAEA,IAAA,IAAA,IAAA,QAAA,EAAA;AACA,QAAA,MAAA,GAAA,KAAA,mBAAA;AACA;;AACA,UAAA,KAAA,KAAA,CAAA,UAAA,IAAA,KAAA,KAAA,CAAA,UAAA,CAAA,UAAA,EAAA;AACA,QAAA,UAAA,CAAA,QAAA,CAAA,KAAA,KAAA,CAAA,UAAA,CAAA,UAAA,EAAA,MAAA;AACA;AACA;;AAzUA;AA5EA,CAAA","sourcesContent":["<template>\n  <div class=\"sql-editor-wrapper\">\n    <codemirror v-model=\"sqlCode\" :options=\"editorOptions\" ref=\"codeEditor\"></codemirror>\n  </div>\n</template>\n\n<script>\nimport { codemirror, CodeMirror } from \"vue-codemirror\";\nimport sqlFormatter from \"sql-formatter\";\n_ = require('lodash')\nimport \"codemirror/lib/codemirror.css\";\n// 语言语法\nimport \"codemirror/mode/sql/sql\";\n// sql语言提示\nimport \"codemirror/addon/hint/sql-hint.js\";\n\n// active-line.js\nimport \"codemirror/addon/selection/active-line.js\";\n\n// styleSelectedText\nimport \"codemirror/addon/selection/mark-selection.js\";\nimport \"codemirror/addon/search/searchcursor.js\";\n\n// 自动提示\nimport \"codemirror/addon/hint/show-hint.js\";\nimport \"codemirror/addon/hint/show-hint.css\";\n\n// highlightSelectionMatches\nimport \"codemirror/addon/scroll/annotatescrollbar.js\";\nimport \"codemirror/addon/search/matchesonscrollbar.js\";\nimport \"codemirror/addon/search/searchcursor.js\";\nimport \"codemirror/addon/search/match-highlighter.js\";\n// keyMap\nimport \"codemirror/mode/clike/clike.js\";\nimport \"codemirror/keymap/sublime.js\";\n\n// foldGutter\nimport \"codemirror/addon/fold/foldgutter.css\";\nimport \"codemirror/addon/fold/brace-fold.js\";\nimport \"codemirror/addon/fold/comment-fold.js\";\nimport \"codemirror/addon/fold/foldcode.js\";\nimport \"codemirror/addon/fold/foldgutter.js\";\nimport \"codemirror/addon/fold/indent-fold.js\";\nimport \"codemirror/addon/fold/markdown-fold.js\";\nimport \"codemirror/addon/fold/xml-fold.js\";\n\n// theme css\nimport \"codemirror/theme/xq-dark.css\";\nimport \"codemirror/theme/xq-light.css\";\n\nimport { KEYWORDS, FUNCTIONS } from \"./editor-box\";\n\n\n// 匹配 （from || join）关键字\nconst TABLE_SUGGESET_POS_REG = /(^|\\s+)(from|join)\\s+(\\S*)$/i;\n\n// 匹配表名 别名\nconst TABLES_PATTENS = [\n  /\\sjoin\\s+([\\w._`]+)\\s*(?:as)?\\s*([\\w_`]+)?/gi,\n  /\\sfrom\\s+([\\w._`]+)\\s*(?:as)?\\s*([\\w_`]+)?/gi\n];\n\nexport default {\n  name: \"sqlEditor\",\n  components: {\n    codemirror\n  },\n  props: {},\n  data() {\n    return {\n      sqlCode: 'select\\n' +\n              '  distinct userid\\n' +\n              'from\\n' +\n              '  tutor.s_tutor_order_tp\\n' +\n              'where\\n' +\n              '  datediff(\\'2016-08-08\\', paiddt) >= 1\\n' +\n              '  and datediff(\\'2016-08-08\\', paiddt) <= ？ ？ --过去？天',\n      editorOptions: {\n        // codemirror options\n        tabSize: 4,\n        mode: \"text/x-mysql\",\n        theme: \"xq-light\",\n        fullScreen: false,\n        lineNumbers: true,\n        line: true,\n        // 代码折叠\n        foldGutter: true,\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        // 高级配置（需要引入对应的插件包）,codemirror advanced options(You need to manually introduce the corresponding codemirror function script code)\n        // sublime、emacs、vim三种键位模式，支持你的不同操作习惯\n        keyMap: \"sublime\",\n        // 按键映射，比如Ctrl键映射autocomplete，autocomplete是hint代码提示事件\n        extraKeys: {\n          F9: () => {\n            this.formatSqlFun();\n          },\n          \"Ctrl-space\": \"autocomplete\"\n        },\n        showHitObj: null, // 延迟显示联想列表\n        currentWord: \"\", // 关键字记录\n        updateTimer: null,\n        sqlSuggestList: [],\n        // 联想功能\n        // hint: （cm) => {\n        //   return this.Hint();\n        // }\n        // hint.js options\n        hintOptions: {\n          // 当匹配只有一项的时候是否自动补全\n          completeSingle: false\n        },\n        // 联想表名\n        sqlSuggestTableNameLists: [],\n        // 联想表\n        sqlSuggestTableLists: [],\n        // 联想列名\n        sqlSuggestColumns: [],\n        runCur: null\n        // 选中文本自动高亮，及高亮方式\n        // styleSelectedText: true,\n        // highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true },\n        // more codemirror options...\n        // 如果有hint方面的配置，也应该出现在这里\n      }\n    };\n  },\n  computed: {\n    codemirror() {\n      return this.$refs.codeEditor.codemirror;\n    }\n  },\n  mounted() {\n    if (this.$refs.codeEditor) {\n      // 绑定键盘事件\n      this.$refs.codeEditor.codemirror.on(\"keyup\", this.handleEditorKeyUp);\n    }\n  },\n  destroyed() {},\n  methods: {\n    // 联想表名\n    autocompleteTables(editor) {\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      let list = [];\n\n      list = this.getSuggestListByRequsest(this.sqlSuggestTableNameLists, word);\n      this.hintSort(list, word);\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 联想表名|列名处理\n    getSuggestListByRequsest(list, word) {\n      let listArr = [];\n      let map = {};\n      for (let i = 0, len = list.length; i < len; i++) {\n        let item = list[i].toLowerCase();\n        if (item.indexOf(word.trim()) !== -1) {\n          // if (word === item) {\n          //     continue;\n          // }\n          if (!map[list[i]]) {\n            listArr.push(list[i]);\n            map[list[i]] = true;\n          }\n        }\n      }\n      return listArr;\n    },\n    autocompleteColumns(editor) {\n      let list = [];\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      //联想列名\n      let sqlSuggestColumns = this.getSuggestListByRequsest(\n        this.sqlSuggestColumns,\n        word\n      );\n      list = list.concat(sqlSuggestColumns);\n      this.hintSort(list, word);\n      list = [...new Set(list)];\n\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 本地关键字联想\n    autoComplete(editor) {\n      let COMBINED_KEYWORDS = KEYWORDS.concat(FUNCTIONS);\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      let list = [];\n      // let sql = editor.getValue();\n\n      //关键字,函数\n      if (word.indexOf(\".\") < 0) {\n        let a = this.getSuggestListByLocal(COMBINED_KEYWORDS, word);\n        list = list.concat(a);\n      }\n      //变量\n      if (word.indexOf(\".\") < 0) {\n        if (this.systemVars && this.systemVars.length) {\n          let arr = this.getSuggestListByLocal(this.systemVars, word);\n          list = list.concat(arr);\n        }\n      }\n      this.hintSort(list, word);\n      // if (list.length < 10) { // 加入已经输入的单词联想关键字\n      //     let words = sql.split(/[^\\w_\\u4e00-\\u9fa5]/);\n      //     let nwords = [];\n      //     for (let i = 0; i < words.length; i++) {\n      //         if ((!words[i]) || (word === words[i])) {\n      //             continue;\n      //         }\n      //         nwords.push(words[i]);\n      //     }\n      //     list = list.concat(this.getSuggestListByLocal(nwords, word));\n      // }\n      list = [...new Set(list)];\n\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 通过关键字 匹配获取suggest列表\n    getSuggestListByLocal(list, word) {\n      if (word.trim() === \"\") {\n        return [];\n      }\n\n      let map = {};\n      let listArr = [];\n      for (let i = 0, localL = list.length; i < localL; i++) {\n        let a = list[i].toLowerCase();\n        if (a.indexOf(word.trim()) !== -1) {\n          // if (isSelf && (word === a)) {\n          //     continue;\n          // }\n          if (!map[list[i]]) {\n            listArr.push(list[i]);\n            map[list[i]] = true;\n          }\n        }\n      }\n\n      return listArr;\n    },\n    hintSort(arr, key) {\n      for (let i = 0; i < arr.Length; i++) {\n        for (let j = i; j < arr.Length; j++) {\n          let a = arr[i].toLowerCase();\n          let b = arr[j].toLowerCase();\n          if (a.indexOf(key) > b.indexOf(key)) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n          }\n        }\n      }\n    },\n    formatSqlFun() {\n      this.sqlCode = sqlFormatter.format(this.sqlCode, {});\n    },\n    // 键盘事件监听\n    handleEditorKeyUp(editor, e) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        const value = editor.getValue().trim(); // 输入的所有sql\n        let cur = editor.getCursor();\n        let token = this.getToken(editor, cur);\n        let word = token.string.toLowerCase().trim(); // 关键字\n\n        if (\n          e.key === \"Enter\" ||\n          e.key === \"Tab\" ||\n          e.key === \"Escape\" ||\n          word === \"\"\n        ) {\n          this.currentWord = \"\";\n          return true;\n        }\n        if (\n          this.currentWord === word &&\n          (e.key === \"ArrowUp\" || e.key === \"ArrowDown\")\n        ) {\n          return true;\n        }\n        this.currentWord = word;\n        // 复位\n        this.sqlSuggestColumns = [];\n        this.runCur = cur;\n        this.getSuggestData(editor, value, word);\n      }, 100);\n    },\n    // 获取光标的位置\n    getToken(e, cur) {\n      let t = e.getTokenAt(cur);\n\n      if (\n        t.string &&\n        (t.string.indexOf(\".\") >= 0 || t.string.indexOf(\"$\") >= 0)\n      ) {\n        if (cur.ch > 0) {\n          let before = e.getTokenAt({\n            line: cur.line,\n            ch: t.start\n          });\n          t.string = (before.string + t.string).trim();\n          t.start = before.start;\n        }\n      }\n      return t;\n    },\n    // execSql() {\n    //   let sql =\n    //     (this.codemirror && this.codemirror.getSelection()) || this.sqlCode;\n    //   let postData = { db: this.db, name: this.sqlName, sql };\n    //   console.log(execSql);\n    //   execSql(postData).then(data => {\n    //     console.log(data);\n    //   });\n    //   console.log(sql);\n    // },\n    getSuggestData(editor, value, word) {\n      let cur = editor.getCursor();\n      // 记录当前查询关键词\n      if (word.trim() === \"\") {\n        return;\n      }\n      let tablesAlias = this.getTablesAndAlias(value);\n      let leftValue = editor.getRange({ line: 0, ch: 0 }, cur);\n      // if (TABLE_SUGGESET_POS_REG.test(leftValue) && this.dsName) {\n      //   // from join 后请求表名\n      //   this.getHintTables({ dsName: this.dsName, q: word });\n      // } else if (tablesAlias.length && this.dsName) {\n      //   // 是否有表 表是否有别名\n      //   this.getHintColumns(tablesAlias, word);\n      // } else {\n      //   this.showSuggestMenu(\"local\"); // 本地联想\n      // }\n      if (TABLE_SUGGESET_POS_REG.test(leftValue)) {\n        // from join 后请求表名\n        this.getHintTables();\n      } else if (tablesAlias.length) {\n        // 是否有表 表是否有别名\n        this.getHintColumns(tablesAlias, word);\n      } else {\n        this.showSuggestMenu('local'); // 本地联想\n      }\n    },\n    getHintTables() {\n      this.sqlSuggestTableNameLists = ['aaa','bbb','ccc', 'def', 'table1','table2','table3','table4', 'ghy'];\n      this.showSuggestMenu(\"table\");\n    },\n    getHintColumns(tablesAlias, word) {\n      let tables = [];\n      let table;\n      let body = {};\n      let leftWord;\n      let idx = word.indexOf(\".\");\n      if (idx !== -1) {\n        leftWord = word.substr(0, idx);\n\n        tablesAlias.forEach((item, i) => {\n          if (item.alias === leftWord) {\n            table = item.name;\n          }\n        });\n\n        if (table) {\n          body.tables = [table];\n          this.getColumnList();\n        }\n      } else {\n        tablesAlias.forEach((item, i) => {\n          if (item.name !== \"\") {\n            tables.push(item.name);\n          }\n        });\n\n        tables = [...new Set(tables)];\n        body.tables = tables;\n\n        if (tables.length) {\n          this.getColumnList({ body });\n        }\n      }\n    },\n    getColumnList() {\n      this.sqlSuggestColumns = ['user', 'age', 'name', 'id', 'abc', 'efg', 'hij', 'klm', 'nuv', 'wh'];\n      this.showSuggestMenu(\"column\");\n    },\n    // 别名是否合法\n    isLegalAlias(alias) {\n      let keywords = {\n        where: 1,\n        on: 1,\n        using: 1,\n        join: 1,\n        group: 1,\n        order: 1,\n        limit: 1\n      };\n      return !keywords[alias.toLowerCase()];\n    },\n    // 拿到sql 输入的所有表和对应的别名\n    getTablesAndAlias(sql) {\n      let COMBINED_KEYWORDS = KEYWORDS.concat(FUNCTIONS);\n      let names = [];\n      for (let i = 0; i < TABLES_PATTENS.length; i++) {\n        let reg = TABLES_PATTENS[i];\n        for (;;) {\n          let found = reg.exec(sql);\n          if (!found) {\n            break;\n          }\n\n          reg.lastIndex = found.index + 1;\n          let t = found[1];\n\n          let alias = \"\";\n          if (found[2]) {\n            alias = found[2].toLowerCase();\n            if (!this.isLegalAlias(alias)) {\n              alias = \"\";\n            }\n          }\n          if (COMBINED_KEYWORDS.indexOf(t.toUpperCase()) !== -1) {\n            continue;\n          }\n\n          names.push({\n            name: t,\n            alias: alias\n          });\n        }\n      }\n      return names;\n    },\n    showSuggestMenu(type) {\n      let autoFn;\n      if (this.runCur) {\n        let cur = this.codemirror.getCursor();\n        if (!_.isEqual(this.runCur, cur)) {\n          return;\n        }\n      }\n\n      if (type == \"local\") {\n        autoFn = this.autoComplete;\n      } else if (type == \"table\") {\n        autoFn = this.autocompleteTables;\n      } else if (type == \"column\") {\n        autoFn = this.autocompleteColumns;\n      }\n      if (this.$refs.codeEditor && this.$refs.codeEditor.codemirror) {\n        CodeMirror.showHint(this.$refs.codeEditor.codemirror, autoFn);\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.sql-editor-wrapper {\n  height: 800px;\n}\n.vue-codemirror {\n  height: 100%;\n  overflow: hidden;\n  /deep/ .CodeMirror {\n    height: 100%;\n    overflow: auto;\n    .CodeMirror-lines {\n      padding-top: 6px;\n    }\n  }\n}\n</style>"],"sourceRoot":"src"}]}