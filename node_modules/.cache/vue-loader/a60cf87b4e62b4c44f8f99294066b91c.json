{"remainingRequest":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lishumin/Desktop/demo/sql-editor/src/sqlEditor.vue?vue&type=style&index=0&id=8ab9705c&lang=less&scoped=true&","dependencies":[{"path":"/Users/lishumin/Desktop/demo/sql-editor/src/sqlEditor.vue","mtime":1592982765478},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lishumin/Desktop/demo/sql-editor/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc3FsLWVkaXRvci13cmFwcGVyIHsKICBoZWlnaHQ6IDgwMHB4Owp9Ci52dWUtY29kZW1pcnJvciB7CiAgaGVpZ2h0OiAxMDAlOwogIG92ZXJmbG93OiBoaWRkZW47CiAgL2RlZXAvIC5Db2RlTWlycm9yIHsKICAgIGhlaWdodDogMTAwJTsKICAgIG92ZXJmbG93OiBhdXRvOwogICAgLkNvZGVNaXJyb3ItbGluZXMgewogICAgICBwYWRkaW5nLXRvcDogNnB4OwogICAgfQogIH0KfQo="},{"version":3,"sources":["sqlEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAydA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sqlEditor.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div class=\"sql-editor-wrapper\">\n    <codemirror v-model=\"sqlCode\" :options=\"editorOptions\" ref=\"codeEditor\"></codemirror>\n  </div>\n</template>\n\n<script>\nimport { codemirror, CodeMirror } from \"vue-codemirror\";\nimport sqlFormatter from \"sql-formatter\";\n_ = require('lodash')\nimport \"codemirror/lib/codemirror.css\";\n// 语言语法\nimport \"codemirror/mode/sql/sql\";\n// sql语言提示\nimport \"codemirror/addon/hint/sql-hint.js\";\n\n// active-line.js\nimport \"codemirror/addon/selection/active-line.js\";\n\n// styleSelectedText\nimport \"codemirror/addon/selection/mark-selection.js\";\nimport \"codemirror/addon/search/searchcursor.js\";\n\n// 自动提示\nimport \"codemirror/addon/hint/show-hint.js\";\nimport \"codemirror/addon/hint/show-hint.css\";\n\n// highlightSelectionMatches\nimport \"codemirror/addon/scroll/annotatescrollbar.js\";\nimport \"codemirror/addon/search/matchesonscrollbar.js\";\nimport \"codemirror/addon/search/searchcursor.js\";\nimport \"codemirror/addon/search/match-highlighter.js\";\n// keyMap\nimport \"codemirror/mode/clike/clike.js\";\nimport \"codemirror/keymap/sublime.js\";\n\n// foldGutter\nimport \"codemirror/addon/fold/foldgutter.css\";\nimport \"codemirror/addon/fold/brace-fold.js\";\nimport \"codemirror/addon/fold/comment-fold.js\";\nimport \"codemirror/addon/fold/foldcode.js\";\nimport \"codemirror/addon/fold/foldgutter.js\";\nimport \"codemirror/addon/fold/indent-fold.js\";\nimport \"codemirror/addon/fold/markdown-fold.js\";\nimport \"codemirror/addon/fold/xml-fold.js\";\n\n// theme css\nimport \"codemirror/theme/xq-dark.css\";\nimport \"codemirror/theme/xq-light.css\";\n\nimport { KEYWORDS, FUNCTIONS } from \"./editor-box\";\n\n\n// 匹配 （from || join）关键字\nconst TABLE_SUGGESET_POS_REG = /(^|\\s+)(from|join)\\s+(\\S*)$/i;\n\n// 匹配表名 别名\nconst TABLES_PATTENS = [\n  /\\sjoin\\s+([\\w._`]+)\\s*(?:as)?\\s*([\\w_`]+)?/gi,\n  /\\sfrom\\s+([\\w._`]+)\\s*(?:as)?\\s*([\\w_`]+)?/gi\n];\n\nexport default {\n  name: \"sqlEditor\",\n  components: {\n    codemirror\n  },\n  props: {},\n  data() {\n    return {\n      sqlCode: 'select\\n' +\n              '  distinct userid\\n' +\n              'from\\n' +\n              '  tutor.s_tutor_order_tp\\n' +\n              'where\\n' +\n              '  datediff(\\'2016-08-08\\', paiddt) >= 1\\n' +\n              '  and datediff(\\'2016-08-08\\', paiddt) <= ？ ？ --过去？天',\n      editorOptions: {\n        // codemirror options\n        tabSize: 4,\n        mode: \"text/x-mysql\",\n        theme: \"xq-light\",\n        fullScreen: false,\n        lineNumbers: true,\n        line: true,\n        // 代码折叠\n        foldGutter: true,\n        gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n        // 高级配置（需要引入对应的插件包）,codemirror advanced options(You need to manually introduce the corresponding codemirror function script code)\n        // sublime、emacs、vim三种键位模式，支持你的不同操作习惯\n        keyMap: \"sublime\",\n        // 按键映射，比如Ctrl键映射autocomplete，autocomplete是hint代码提示事件\n        extraKeys: {\n          F9: () => {\n            this.formatSqlFun();\n          },\n          \"Ctrl-space\": \"autocomplete\"\n        },\n        showHitObj: null, // 延迟显示联想列表\n        currentWord: \"\", // 关键字记录\n        updateTimer: null,\n        sqlSuggestList: [],\n        // 联想功能\n        // hint: （cm) => {\n        //   return this.Hint();\n        // }\n        // hint.js options\n        hintOptions: {\n          // 当匹配只有一项的时候是否自动补全\n          completeSingle: false\n        },\n        // 联想表名\n        sqlSuggestTableNameLists: [],\n        // 联想表\n        sqlSuggestTableLists: [],\n        // 联想列名\n        sqlSuggestColumns: [],\n        runCur: null\n        // 选中文本自动高亮，及高亮方式\n        // styleSelectedText: true,\n        // highlightSelectionMatches: { showToken: /\\w/, annotateScrollbar: true },\n        // more codemirror options...\n        // 如果有hint方面的配置，也应该出现在这里\n      }\n    };\n  },\n  computed: {\n    codemirror() {\n      return this.$refs.codeEditor.codemirror;\n    }\n  },\n  mounted() {\n    if (this.$refs.codeEditor) {\n      // 绑定键盘事件\n      this.$refs.codeEditor.codemirror.on(\"keyup\", this.handleEditorKeyUp);\n    }\n  },\n  destroyed() {},\n  methods: {\n    // 联想表名\n    autocompleteTables(editor) {\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      let list = [];\n\n      list = this.getSuggestListByRequsest(this.sqlSuggestTableNameLists, word);\n      this.hintSort(list, word);\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 联想表名|列名处理\n    getSuggestListByRequsest(list, word) {\n      let listArr = [];\n      let map = {};\n      for (let i = 0, len = list.length; i < len; i++) {\n        let item = list[i].toLowerCase();\n        if (item.indexOf(word.trim()) !== -1) {\n          // if (word === item) {\n          //     continue;\n          // }\n          if (!map[list[i]]) {\n            listArr.push(list[i]);\n            map[list[i]] = true;\n          }\n        }\n      }\n      return listArr;\n    },\n    autocompleteColumns(editor) {\n      let list = [];\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      //联想列名\n      let sqlSuggestColumns = this.getSuggestListByRequsest(\n        this.sqlSuggestColumns,\n        word\n      );\n      list = list.concat(sqlSuggestColumns);\n      this.hintSort(list, word);\n      list = [...new Set(list)];\n\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 本地关键字联想\n    autoComplete(editor) {\n      let COMBINED_KEYWORDS = KEYWORDS.concat(FUNCTIONS);\n      let cur = editor.getCursor();\n      let token = this.getToken(editor, cur);\n      let word = token.string.toLowerCase();\n      let list = [];\n      // let sql = editor.getValue();\n\n      //关键字,函数\n      if (word.indexOf(\".\") < 0) {\n        let a = this.getSuggestListByLocal(COMBINED_KEYWORDS, word);\n        list = list.concat(a);\n      }\n      //变量\n      if (word.indexOf(\".\") < 0) {\n        if (this.systemVars && this.systemVars.length) {\n          let arr = this.getSuggestListByLocal(this.systemVars, word);\n          list = list.concat(arr);\n        }\n      }\n      this.hintSort(list, word);\n      // if (list.length < 10) { // 加入已经输入的单词联想关键字\n      //     let words = sql.split(/[^\\w_\\u4e00-\\u9fa5]/);\n      //     let nwords = [];\n      //     for (let i = 0; i < words.length; i++) {\n      //         if ((!words[i]) || (word === words[i])) {\n      //             continue;\n      //         }\n      //         nwords.push(words[i]);\n      //     }\n      //     list = list.concat(this.getSuggestListByLocal(nwords, word));\n      // }\n      list = [...new Set(list)];\n\n      return {\n        list: list,\n        from: CodeMirror.Pos(cur.line, token.start),\n        to: CodeMirror.Pos(cur.line, token.end)\n      };\n    },\n    // 通过关键字 匹配获取suggest列表\n    getSuggestListByLocal(list, word) {\n      if (word.trim() === \"\") {\n        return [];\n      }\n\n      let map = {};\n      let listArr = [];\n      for (let i = 0, localL = list.length; i < localL; i++) {\n        let a = list[i].toLowerCase();\n        if (a.indexOf(word.trim()) !== -1) {\n          // if (isSelf && (word === a)) {\n          //     continue;\n          // }\n          if (!map[list[i]]) {\n            listArr.push(list[i]);\n            map[list[i]] = true;\n          }\n        }\n      }\n\n      return listArr;\n    },\n    hintSort(arr, key) {\n      for (let i = 0; i < arr.Length; i++) {\n        for (let j = i; j < arr.Length; j++) {\n          let a = arr[i].toLowerCase();\n          let b = arr[j].toLowerCase();\n          if (a.indexOf(key) > b.indexOf(key)) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n          }\n        }\n      }\n    },\n    formatSqlFun() {\n      this.sqlCode = sqlFormatter.format(this.sqlCode, {});\n    },\n    // 键盘事件监听\n    handleEditorKeyUp(editor, e) {\n      this.timer && clearTimeout(this.timer);\n      this.timer = setTimeout(() => {\n        const value = editor.getValue().trim(); // 输入的所有sql\n        let cur = editor.getCursor();\n        let token = this.getToken(editor, cur);\n        let word = token.string.toLowerCase().trim(); // 关键字\n\n        if (\n          e.key === \"Enter\" ||\n          e.key === \"Tab\" ||\n          e.key === \"Escape\" ||\n          word === \"\"\n        ) {\n          this.currentWord = \"\";\n          return true;\n        }\n        if (\n          this.currentWord === word &&\n          (e.key === \"ArrowUp\" || e.key === \"ArrowDown\")\n        ) {\n          return true;\n        }\n        this.currentWord = word;\n        // 复位\n        this.sqlSuggestColumns = [];\n        this.runCur = cur;\n        this.getSuggestData(editor, value, word);\n      }, 100);\n    },\n    // 获取光标的位置\n    getToken(e, cur) {\n      let t = e.getTokenAt(cur);\n\n      if (\n        t.string &&\n        (t.string.indexOf(\".\") >= 0 || t.string.indexOf(\"$\") >= 0)\n      ) {\n        if (cur.ch > 0) {\n          let before = e.getTokenAt({\n            line: cur.line,\n            ch: t.start\n          });\n          t.string = (before.string + t.string).trim();\n          t.start = before.start;\n        }\n      }\n      return t;\n    },\n    // execSql() {\n    //   let sql =\n    //     (this.codemirror && this.codemirror.getSelection()) || this.sqlCode;\n    //   let postData = { db: this.db, name: this.sqlName, sql };\n    //   console.log(execSql);\n    //   execSql(postData).then(data => {\n    //     console.log(data);\n    //   });\n    //   console.log(sql);\n    // },\n    getSuggestData(editor, value, word) {\n      let cur = editor.getCursor();\n      // 记录当前查询关键词\n      if (word.trim() === \"\") {\n        return;\n      }\n      let tablesAlias = this.getTablesAndAlias(value);\n      let leftValue = editor.getRange({ line: 0, ch: 0 }, cur);\n      // if (TABLE_SUGGESET_POS_REG.test(leftValue) && this.dsName) {\n      //   // from join 后请求表名\n      //   this.getHintTables({ dsName: this.dsName, q: word });\n      // } else if (tablesAlias.length && this.dsName) {\n      //   // 是否有表 表是否有别名\n      //   this.getHintColumns(tablesAlias, word);\n      // } else {\n      //   this.showSuggestMenu(\"local\"); // 本地联想\n      // }\n      if (TABLE_SUGGESET_POS_REG.test(leftValue)) {\n        // from join 后请求表名\n        this.getHintTables();\n      } else if (tablesAlias.length) {\n        // 是否有表 表是否有别名\n        this.getHintColumns(tablesAlias, word);\n      } else {\n        this.showSuggestMenu('local'); // 本地联想\n      }\n    },\n    getHintTables() {\n      this.sqlSuggestTableNameLists = ['aaa','bbb','ccc', 'def', 'table1','table2','table3','table4', 'ghy'];\n      this.showSuggestMenu(\"table\");\n    },\n    getHintColumns(tablesAlias, word) {\n      let tables = [];\n      let table;\n      let body = {};\n      let leftWord;\n      let idx = word.indexOf(\".\");\n      if (idx !== -1) {\n        leftWord = word.substr(0, idx);\n\n        tablesAlias.forEach((item, i) => {\n          if (item.alias === leftWord) {\n            table = item.name;\n          }\n        });\n\n        if (table) {\n          body.tables = [table];\n          this.getColumnList();\n        }\n      } else {\n        tablesAlias.forEach((item, i) => {\n          if (item.name !== \"\") {\n            tables.push(item.name);\n          }\n        });\n\n        tables = [...new Set(tables)];\n        body.tables = tables;\n\n        if (tables.length) {\n          this.getColumnList({ body });\n        }\n      }\n    },\n    getColumnList() {\n      this.sqlSuggestColumns = ['user', 'age', 'name', 'id', 'abc', 'efg', 'hij', 'klm', 'nuv', 'wh'];\n      this.showSuggestMenu(\"column\");\n    },\n    // 别名是否合法\n    isLegalAlias(alias) {\n      let keywords = {\n        where: 1,\n        on: 1,\n        using: 1,\n        join: 1,\n        group: 1,\n        order: 1,\n        limit: 1\n      };\n      return !keywords[alias.toLowerCase()];\n    },\n    // 拿到sql 输入的所有表和对应的别名\n    getTablesAndAlias(sql) {\n      let COMBINED_KEYWORDS = KEYWORDS.concat(FUNCTIONS);\n      let names = [];\n      for (let i = 0; i < TABLES_PATTENS.length; i++) {\n        let reg = TABLES_PATTENS[i];\n        for (;;) {\n          let found = reg.exec(sql);\n          if (!found) {\n            break;\n          }\n\n          reg.lastIndex = found.index + 1;\n          let t = found[1];\n\n          let alias = \"\";\n          if (found[2]) {\n            alias = found[2].toLowerCase();\n            if (!this.isLegalAlias(alias)) {\n              alias = \"\";\n            }\n          }\n          if (COMBINED_KEYWORDS.indexOf(t.toUpperCase()) !== -1) {\n            continue;\n          }\n\n          names.push({\n            name: t,\n            alias: alias\n          });\n        }\n      }\n      return names;\n    },\n    showSuggestMenu(type) {\n      let autoFn;\n      if (this.runCur) {\n        let cur = this.codemirror.getCursor();\n        if (!_.isEqual(this.runCur, cur)) {\n          return;\n        }\n      }\n\n      if (type == \"local\") {\n        autoFn = this.autoComplete;\n      } else if (type == \"table\") {\n        autoFn = this.autocompleteTables;\n      } else if (type == \"column\") {\n        autoFn = this.autocompleteColumns;\n      }\n      if (this.$refs.codeEditor && this.$refs.codeEditor.codemirror) {\n        CodeMirror.showHint(this.$refs.codeEditor.codemirror, autoFn);\n      }\n    }\n  }\n};\n</script>\n\n<style lang=\"less\" scoped>\n.sql-editor-wrapper {\n  height: 800px;\n}\n.vue-codemirror {\n  height: 100%;\n  overflow: hidden;\n  /deep/ .CodeMirror {\n    height: 100%;\n    overflow: auto;\n    .CodeMirror-lines {\n      padding-top: 6px;\n    }\n  }\n}\n</style>"]}]}